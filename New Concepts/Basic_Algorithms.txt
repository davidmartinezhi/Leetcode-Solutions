Binary search: Iteratively

The point is to keep reducing in half the array or string until we find the element we are looking for

Iterative BS has complexity:
    time: O(log n)
    space: O(1)

    int search(vector<int>& nums, int target) {

        int left = 0;
        int right = nums.size();

        while(left < right){

            int m = ((right-left)/2) + left;

            //check if found
            if(nums[m] == target) return m;
            else if(nums[m] < target) left = m+1;
            else right = m;

        }


        return -1;
    }

DFS
La esencia es ir a lo mÃ¡s profundo y una vez que topamos, regresamos para checar otras condiciones,
esta es la recursividad normal hasta el suelo en Binary search trees.

Application of DFS Algorithm:
    For finding the path
    To test if the graph is bipartite
    For finding the strongly connected components of a graph
    For detecting cycles in a graph


Algoritmos en grafos

  Recursive DFS
    Complexity:
        time: O(v+e)
        extra space: O(v+e) = O(# of nodes + recursive calls) for visited data structure

    Have 2 hashtables or maps:
        - visited <value, bool>
        -adjacency list <value, list>

    recursively
        current value set as visited
        iterate it's adjacecy list,
            if value in adjacency list is not visited, send that value to the recursive call

    
  Iterative DFS
    Complexity:
        time: O(v+e)
        extra space: O(v) = O(# of nodes) for visited data structure

    Create a stack for nodes to visit and vector for visited nodes
    push current source node

    while the stack is not empty

        get top element with a pop

        if value is not visited, set as true

        traverse adjacency list and if nodes have not been visited, push to stack


    Do this to each node






BFS

Iterative solution
    Complexity:
        time: O(v+e)
        extra space: O(v) = O(# of nodes) for visited data structure

    Uses a queue for nodes to visit and array for visited nodes

    mark first node as visited and add to queue

    while queue is not empty

        get front value and pop it from queue

        traverse adjacent nodes
            if node has not been visited
                mark as visited
                add to queue




Merge Sort