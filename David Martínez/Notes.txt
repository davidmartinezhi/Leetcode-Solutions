Checar en C++:
    -Sets (En c++, usan el binary tree implementation, han de ser buenos para busqueda y ordenamiento)
        
*Puede ser utíl checar videos de gente resolviendo los problemas en el momento,
    De tal manera que pueda emular su approach a los problemas y saber identificarlos.
    
//repositorio
    -Agregar descripción en optimize and solve techniques 
    -Hacer digerible o poner ejemplos en solution_flow

*Escribir for loops de manera limpia
    x es el entero donde quiero que comience
    #define len(x) x.size()
    #define bf(i, x, n) for(int i = x; i < n; i++) //basic for (<)

    ahora for loop se escribe como 
    bf(i, 0, n){
        bf(j, 0, n){
            blablabla
        }
    }

//libro: http://englishonlineclub.com/pdf/Cracking%20the%20Coding%20Interview%20-%20189%20Programming%20Questions%20and%20Solutions%20(6th%20Edition)%20[EnglishOnlineClub.com].pdf
//Solution flow: pagina 62 del libro.

//Big O, resources
https://medium.com/karuna-sehgal/a-simplified-explanation-of-the-big-o-notation-82523585e835



//Siento que strings y arrays en easy, van a ser una buena introcucción a la utilización de hashtables. update: es correcto

//He notado que las soluciones más eficientes, son muchas veces con manipulación de bits. No debo olvidarme en checar ese tema.
    -checar bitset y memset.

To-Do:
-Estudiar y practicar recursividad.
-Investigar sobre bit manipulation
-Checar ejercicios para practicar recorridos de matrices (Vamos mejorando, pero aún falta fluides en este tipo de problemas)
-Agregar secciones sobre traversals y estructuras de datos.
-Investigar sobre Greedy Algorithms
-Investigar, cuando utilizar Kadane's algorithm o dynamic window technique: listo
-Luego investigar bits manipulation, ejemplo el ^= en c++ que es un XOR. Pendiente
    -Checar memset y bitset en manipulación de bits.
-Poner ayuda rapida de como convertir letras de minusculas a mayusculas o como checar que algo es un numero o alphanumerico. (como en el problema easy/string/validPalindrome.cpp)
-Construct binary tree from inorder and preorder traversal array
    -Investigar porque funciono con un map y no con un unordered_map
    -Checar logica
-Investigar sobre dynammic programming, que hace que algo sea dynamic y como identificarlo
-Esto es más intenso y no afuerzas, pero checar como crear una función o struct para hacer hashing rapido, como en problema group anagrams.
-investigar matrix exponentiation
-familiarizarme con resolver permutations
-hard/arrays/first missing positive, checar approach con optima memoria y runtime
-Checar como hacer bfs and dfs traversal con una matriz, como para evitar obstaculos

Terminado
-Hacer, usando la metodologia del libro. Problemas Array easy: Single Number y Rotate Array. Terminado
-Anotar problemas de mi entrevista para que los demas los tengan y lo puedan intentar. Terminado
-También checar el solution flow que viene en cracking the coding interview. Terminado.
-Anotar las "Optimize and Solve Techniques". Terminado
-Investigar unordered_map.
-Repasar Big O, en especial con memoria. Terminado
-Poner fuentes para estudiar big O y Link del libro. En el repositorio. terminado
-Lunes practicar set y maps en c++. O ver un video de alguién resolviendo el problema y ver con que lo resuelve el hashtable. terminado
-Debo terminar archivo estilo "cheatsheet" de optimize and solve technique. terminado
-Poner archivos con tecnicas de optimize and solve, profundizando en los temas. terminado
-Debo poner un super resumen en el archivo de optimize and solve technique. El folder solo tendra profundización y ejemplos
-Reverse integer y string to integer(atoi), checar como trabajar con limites. terminado
-Checar el Morris traversal
-Investigar cuando me puede ser utíl un algoritmo recursivo y como identificarlos. (Lo vere cuando llegue problemas de BST)
-Investigar sobre Divide and conquer. terminado
-Checar backtracking

Reminder
-Debo familiarizarme en trabajar con matrices.
-Sliding Window Technique: https://youtu.be/dQw4w9WgXcQ


Trees:
    -Los recorridos lo son todo.

    -Recorrido BFS es con Queue y DFS es con Recursividad, en Trees(arboles).
    BFS es para checar cada renglon en lo que llegas al final.

    BFS, checas cada renglon y luego si tiene nodos los agregas al queue. 
    El count es muy util para saber las operaciones que hacer y sobre que nodos hacerlo.

    DFS es para checar desde el final para arriba.
    Aquí se checa 1 o mas base cases, llamamos la función en subarbol iz, luego en subarbol der
    Unimos los resultados al regresar.
    
    Con recursividad también podría hacer el inorder, postorder y preorder-


La clave para los árboles es enteder las maneras de recorrerlo primero.
        -preorder
        -inorder
        -postorder
        -level by level (bfs)
        -dfs (recursividad)
    Esto es lo basic que todos deben de saber antes de siquiera comenzar a hacer los ejercicios al 100.


La clave en arrays y string:

    Usar Hashtables.

    Two pointer technique y sus derivados.
        -Uno al inicio y otro al final (-> <-)
        -Ambos enmedio y crecen hasta llegar a los extemos ( <- ->)
        -Pointer fijo y pointer iterativo
    
    Sliding Window Technique.
        -Fixed Window
        -Dynamic Window

Matrices:

    Usar vectores auxiliares que representan renglon y col.
    Familiareizarse con moverse fluido a traves de la matriz.
        Siempre recorres con 2 for loops, i y j. Depende como lo acomodes
        [i][j] estas recorriendo el renglon
        [j][i] estas recorriendo la columna 

Linked Lists:
    Slow & Fast pointers

Integers:
        Construir y deconstruir integers.
        Reverse an integer.

Chars:
        Hacer operaciones matematicas con los chars.
        Si es minuscula char-'a', te da el numero del 0, 25 al que pertenece
        char-'0' para operaciones matematicas de numeros que son char

Investigar backtracking y bit manipulation

Aproaches for solving problems:
https://www.programiz.com/dsa/greedy-algorithm#:~:text=A%20greedy%20algorithm%20is%20an,in%20a%20top%2Ddown%20approach.

DIVIDE AND CONQUER
de manera recursiva se deconstruye un problema, para simplificarlo hasta poder resolverlos de manera directa.
La solución de los sub-problemas se combinan para dar solución al problema original.
Por ejemplo el merge sort.

GREEDY ALGORITHMS
top-down approach. 5 -> 0 down-top sería 0 -> 5
never reverses the previous decision 
Selecting the best option available at the moment.
Se selecciona la opción óptima en cada paso local con la esperanza de llegar 
a una solución general óptima.

    -Se usa si tiene estas propiedades:
    Si se puede encontrar una solución óptima al problema eligiendo la mejor opción en cada paso sin 
    reconsiderar los pasos anteriores una vez elegidos, el problema se puede resolver utilizando un enfoque codicioso. 
    Esta propiedad se llama propiedad de elección codiciosa.

    Si la solución general óptima del problema corresponde a la solución óptima de sus subproblemas,
    entonces el problema se puede resolver utilizando un enfoque codicioso. 
    Esta propiedad se llama subestructura óptima.
    En la vida real podría seer como meta: ser titular en americano,
    como? jugando mejor mi posición
    problema: Mi jugar no es bueno
    sub problemas: corro lento, no atrapo pases, etc
    Solución optima de sub problemas llevan a solución optima del problema

    -ventajas
    El algoritmo es más fácil de describir
    Este algoritmo puede funcionar mejor que otros algoritmos (pero no en todos los casos)

    -desventajas
    Como se mencionó anteriormente, el algoritmo codicioso no siempre produce la solución óptima. 
    Esta es la principal desventaja del algoritmo.

    -diferentes tipos de greedy algorithms:
        Selection sort
        Knapsack problem
        Minimum spanning tree
        Single-Source Shortest Path Problem
        Job Scheduling Problem
        Prim's Minimal Spanning Tree Algorithm
        Kruskal's Minimal Spanning Tree Algorithm
        Dijkstra's Minimal Spanning Tree Algorithm
        Huffman Coding
        Ford-Fulkerson Algorithm

BACKTRACKING ALGORITHM
A backtracking algorithm is a problem-solving algorithm that uses a brute force approach for 
finding the desired output.

The Brute force approach tries out all the possible solutions and chooses the desired/best solutions.

The term backtracking suggests that if the current solution is not suitable, then backtrack and try other solutions. Thus, recursion is used in this approach.

This approach is used to solve problems that have multiple solutions. If you want an optimal solution, you must go for dynamic programming.

Backtracking Algorithm Applications
To find all Hamiltonian Paths present in a graph.
To solve the N Queen problem.
Maze solving problem.
The Knight's tour problem.


Disjoint sets
https://www.youtube.com/watch?v=wU6udHRIkcc&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=18
https://www.youtube.com/watch?v=1SFrVShoRYU
