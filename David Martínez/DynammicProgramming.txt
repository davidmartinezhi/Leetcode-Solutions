What is dynammic programming and how to use it
https://www.youtube.com/watch?v=vYquumk4nWw

What is it?
    A way to make your algorithm more efficient by storing some of the intermmediate results

When does it work well?
    When your algorithm has a lot of repetitive computations

Typical 3 steps in dynammic programming.
    1. recursion
    2. store (memoize)
    3. bottom-up


Learn to write 1D Recurrence Relations
https://www.youtube.com/watch?v=mLfjzJsN8us

Understand a DP problem:
    when a question has: 
                "Count the total number of ways"
                "Multiple ways of doing things, give me the min and/or max output"
    
    Whenever the concept of "Try all  possible ways: count or the best way"
        In this cases we apply recursion

    Shortcut for Recurrence Relations   
        1. try to represent problem in terms of index
        2. do all possible stuffs on that index according to problem statement
        3. if the questions says "count all ways", sum up all stuff
            if it says count minimum, take min of all stuffs
            same with maximum


https://www.youtube.com/watch?v=tyB0ztf0DNY&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=2
https://www.youtube.com/watch?v=FfXoiwwnxFw&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&t=0s
Dynammic Programming series

-Those who cannot remember the past, are condomned to repeat it. -DP

Ways to solve it:
    -Tabulation
    -Memoization

Tabulation:
    Bottom-up dynamic programming

Memoization:
    Top-down dynamic programming

4 principles of optimality in dynammic programming
https://www.youtube.com/watch?v=5dRGRueKU3M

Greedy method and DP both are used for solving optimization problems
both have different strategies but purpose is same

Opt problems need optimal min or max result.

Greedy method tryies to follo predefined steps to get the result
    ex. always select this and then do this

DP tryis to find out all possible solutions, and find the best one
    Almost always follow recursive formulas

It follows pronciple of optimality
    by taking sequence of desicions, to get optimal solution. 

    Greedy follows rigid desicion, always does something the same way. sequence of instructions
    DP sequence of decisions

    



Dynamic Programming
https://www.programiz.com/dsa/dynamic-programming

La programación dinámica es una técnica en la programación de computadoras que ayuda a 
resolver de manera eficiente una clase de problemas que tienen subproblemas superpuestos 
y una propiedad de subestructura óptima.
Por ejemplo: De Todas las posibles maneras de hacer x, saca la max/min
             Cuenta las diferentes maneras de resolver x

Si cualquier problema se puede dividir en subproblemas, que a su vez se dividen en 
subproblemas más pequeños, y si hay superposición entre estos subproblemas, entonces 
las soluciones a estos subproblemas se pueden guardar para referencia futura. De esta manera, 
se puede mejorar la eficiencia de la CPU. Este método de resolver una solución se conoce como
programación dinámica.

Dichos problemas implican calcular repetidamente el valor de los mismos subproblemas para encontrar
la solución óptima.

Progra dinamica es guardar información para futuras comparaciones o procesos.

Dynamic programming works by storing the result of subproblems so that when their solutions are required, they are at hand and we do not need to recalculate them.

This technique of storing the value of subproblems is called memoization. 
By saving the values in the array, we save time for computations of 
sub-problems we have already come across
Dynamic programming by memoization is a top-down approach to dynamic programming. And it can also be down-top

However, greedy algorithms look for locally optimum solutions or in other words, a greedy choice, 
in the hopes of finding a global optimum. Hence greedy algorithms can make a guess that looks optimum 
at the time but becomes costly down the line and do not guarantee a globally optimum.

Dynamic programming, on the other hand, finds the optimal solution to subproblems and then makes an 
informed choice to combine the results of those subproblems to find the most optimum solution.

memoization: guardar información de subproblemas, para hacer calculos informados en el futuro

BACKTRACKING
video: https://www.youtube.com/watch?v=Nabbpl7y4Lo
time: undefinec, utilice el tiempo para estudiar el concepto, más que para ahcerlo rapido
complexity: 
    time: O(n^2 * n!) factorial y n^2 por recorrer toda la lista por cada numero en cada permutación
    extra space: O(n) n being the number of numbers

    Backtracking es un concepto abstracto pero ya logre entender que es lo que pasa en el codigo 
    y como puedo obtener las posibles combinaciones de algun array o string.

    backtracking consiste en avanzar hasta el final
        en el camino marcas lo que haz visitado, para no visitarlo de nuevo
        y cuando regresas, exploras los posibles nuevos caminos.

        Siento que esto es dfs


=====================================================================================

https://www.youtube.com/watch?v=f19e_ofbydc&list=PLEJXowNB4kPxBwaXtRO1qFLpCzF75DYrS
DP

Optimization over plain recursion
    Instead of repeating work, we store the result so we use it again later

    Conditions for dp:
        Problem with subproblems, if subproblems can be solved we resolve the entire problem
        Many of subproblems should be repeating (like fibonacci where there is a ton of repetitive calculations) This is optimal substructure

DP Classifications
    Most difficult part is to identify the problem

    Easy to medium level Classifications (most common for interviews)
        1. Knapsack    1) 0-1  2) bounded  3) unbounded
        2. Longest Common subsequence
        3. Longest increasing subsequence
        4. Matrix chain multiplication
        5. DP on grid. One variation is from first cell at top left, to bottom right
        6. Kadane's algorithm
        7. Others

    Advanced DP (not  ommon in interview, yes in competitive programming)
        1. DP Kth-lexicographical string
        2. DP on tree
        3. DP + bitmasking
        4. DP + BIT/segment tree
        5. DP + convex hull
        6. DP + preprocessing
        7. DP + trie
        8. DP + Geometry
        9. DP + Binary search
        10. DP + knuth optimization
        Others...






