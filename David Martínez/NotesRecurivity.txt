Video: 5 steps for solving any recursive problem
https://www.youtube.com/watch?v=ngCos392W4w

1. Write the simplest possible input and it's base cases
2. Play around with examples and visualize
3. Relate hard cases to simpler cases (if i was given the anwser to f(2) can I come out with the answer for f(5)?)
4. Generalize the pattern
5. Write the code by combining recursive pattern with base cases

Recursive leap of faith?
    It's about assuming that easier versions of the problem will be correct.

Practicar más recursividad. En un trabajo real casí no se usa, pero si para entrevistas.


https://www.youtube.com/watch?v=yVdKa8dnKiE&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9
recursion

Introduction to recursion
Recursion: When a function calls itself until a specifical condition is met.

Stack overflow: cuando la llamada recursiva llena la memoria y no puede llamar la función otra vez

Stack space: where the yet to be completed calls are stored, waiting

Base condition: Condition where the recursion calls stop

Recursion Tree: How the recursion calls are called

The base case is decided by the problem statement

Backtracking es cuando en el regreso de las llamadas recursivas, tomas otro camino u otra acción
    -Se regrea para luego probar otro camino